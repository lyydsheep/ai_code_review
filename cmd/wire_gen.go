// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/faiz/llm-code-review/api/handler"
	"github.com/faiz/llm-code-review/api/router"
	"github.com/faiz/llm-code-review/common/middleware"
	"github.com/faiz/llm-code-review/dal/cache"
	"github.com/faiz/llm-code-review/dal/dao"
	"github.com/faiz/llm-code-review/logic/infrastructure"
	"github.com/faiz/llm-code-review/logic/infrastructure/llm"
	"github.com/faiz/llm-code-review/logic/infrastructure/mq/consumer"
	"github.com/faiz/llm-code-review/logic/infrastructure/mq/producer"
	"github.com/faiz/llm-code-review/logic/repository"
	"github.com/faiz/llm-code-review/logic/service"
)

// Injectors from wire.go:

func InitializeApp() *App {
	query := dao.NewQuery()
	cacheCache := cache.NewMemCache()
	usrUserRepository := repository.NewUsrUserRepositoryV1(query, cacheCache)
	githubClient := infrastructure.NewDefaultGithubClient()
	config := producer.NewKafkaConfig()
	client := producer.NewMessageProducer(config)
	webHookService := service.NewWebHookServiceV1(usrUserRepository, githubClient, client)
	webhookHandler := handler.NewWebhookHandler(webHookService)
	v := middleware.GetHandlerFunc()
	engine := router.RegisterRoutersAndMiddleware(webhookHandler, v...)
	llmClient := llm.NewClient()
	pushInfoRepository := repository.NewPushInfoRepositoryV1(query)
	v2 := consumer.NewMQHandlers()
	llmService := service.NewLLMService(llmClient, pushInfoRepository, usrUserRepository, v2...)
	app := NewApp(engine, llmService)
	return app
}
