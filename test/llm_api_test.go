package test

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/faiz/llm-code-review/common/util/httptool"
	"os"
	"testing"
	"time"
)

func TestDeepSeek(t *testing.T) {
	str := "你要针对这次代码变更进行 code-review。首先你需要指出哪些文件进行了修改，接着评审这些修改是否有潜在风险，最后指出是否有优化点。以下是代码变更记录：diff --git a/api/controller/build.go b/api/controller/build.go\ndeleted file mode 100644\nindex edf8cbd..0000000\n--- a/api/controller/build.go\n+++ /dev/null\n@@ -1,73 +0,0 @@\n-package controller\n-\n-// controller 包中文件放置handler 方法\n-\n-import (\n-\t\"github.com/faiz/llm-code-review/api/request\"\n-\t\"github.com/faiz/llm-code-review/common/app\"\n-\t\"github.com/faiz/llm-code-review/common/errcode\"\n-\t\"github.com/faiz/llm-code-review/library\"\n-\t\"github.com/faiz/llm-code-review/logic/service\"\n-\t\"github.com/gin-gonic/gin\"\n-)\n-\n-type BuildController struct {\n-\tappDemoService appService.DemoAppService\n-}\n-\n-func NewBuildController(app appService.DemoAppService) *BuildController {\n-\treturn &BuildController{\n-\t\tappDemoService: app,\n-\t}\n-}\n-\n-func (build *BuildController) TestPagination(c *gin.Context) {\n-\tdata := []struct {\n-\t\tName string `json:\"name\"`\n-\t\tAge  int    `json:\"age\"`\n-\t}{\n-\t\t{\n-\t\t\tName: \"faiz\",\n-\t\t\tAge:  18,\n-\t\t},\n-\t\t{\n-\t\t\tName: \"lyy\",\n-\t\t\tAge:  10,\n-\t\t},\n-\t}\n-\tp := app.NewPagination(c)\n-\tp.SetTotalRows(len(data))\n-\tapp.NewResponse(c).SetPagination(p).Success(data)\n-}\n-\n-func (build *BuildController) TestGormLog(c *gin.Context) {\n-\tids, err := build.appDemoService.GetAllIdentities(c)\n-\tif err != nil {\n-\t\tapp.NewResponse(c).Error(errcode.ErrServer.WithCause(err))\n-\t}\n-\tapp.NewResponse(c).Success(ids)\n-}\n-\n-func (build *BuildController) CreateDemoOrder(c *gin.Context) {\n-\tvar orderReq request.DemoOrderReq\n-\tif err := c.ShouldBindJSON(&orderReq); err != nil {\n-\t\tapp.NewResponse(c).Error(errcode.ErrParams.WithCause(err))\n-\t\treturn\n-\t}\n-\trep, err := build.appDemoService.CreateDemoOrder(c, &orderReq)\n-\tif err != nil {\n-\t\tapp.NewResponse(c).Error(errcode.ErrServer.WithCause(err))\n-\t}\n-\tapp.NewResponse(c).Success(rep)\n-}\n-\n-func (build *BuildController) TestHttpTool(c *gin.Context) {\n-\twhois := library.NewWhoisLib(c)\n-\tres, err := whois.GetHostIpDetail()\n-\tif err != nil {\n-\t\t// 上层很难根据具体的错误类型返回特定的响应码\n-\t\tapp.NewResponse(c).Error(errcode.ErrServer.WithCause(err))\n-\t\treturn\n-\t}\n-\tapp.NewResponse(c).Success(res)\n-}\ndiff --git a/api/controller/webhook.go b/api/controller/webhook.go\nnew file mode 100644\nindex 0000000..89c0536\n--- /dev/null\n+++ b/api/controller/webhook.go\n@@ -0,0 +1,27 @@\n+package controller\n+\n+import (\n+\t\"github.com/faiz/llm-code-review/api/request\"\n+\t\"github.com/faiz/llm-code-review/common/app\"\n+\tlog \"github.com/faiz/llm-code-review/common/logger\"\n+\t\"github.com/gin-gonic/gin\"\n+)\n+\n+type WebhookHandler struct {\n+}\n+\n+func NewWebhookHandler() *WebhookHandler {\n+\treturn &WebhookHandler{}\n+}\n+\n+func (h *WebhookHandler) ProcessHook(ctx *gin.Context) {\n+\tvar req request.HookRequest\n+\tif err := ctx.ShouldBindJSON(&req); err != nil {\n+\t\tlog.New(ctx).Error(\"Failed to bind JSON: %v\", err)\n+\t\tapp.NewResponse(ctx).Error(err)\n+\t\treturn\n+\t}\n+\t// service 逻辑\n+\n+\tapp.NewResponse(ctx).SuccessOk()\n+}\ndiff --git a/api/request/demo.go b/api/request/demo.go\ndeleted file mode 100644\nindex 3f51556..0000000\n--- a/api/request/demo.go\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-package request\n-\n-type DemoOrderReq struct {\n-\tBillMoney    int64  `json:\"billMoney\"`\n-\tOrderGoodsId int64  `json:\"orderGoodsId\"`\n-\tUserId       string `json:\"userId\"`\n-}\ndiff --git a/api/request/webhook.go b/api/request/webhook.go\nnew file mode 100644\nindex 0000000..ee5793e\n--- /dev/null\n+++ b/api/request/webhook.go\n@@ -0,0 +1,16 @@\n+package request\n+\n+type HookRequest struct {\n+\tPusher\n+\tCompare    string `json:\"compare\"`\n+\tRepository string `json:\"repository\"`\n+\tBefore     string `json:\"before\"`\n+\tAfter      string `json:\"after\"`\n+}\n+\n+type Pusher struct {\n+\tName     string `json:\"name\"`\n+\tUserName string `json:\"username\"`\n+\tEmail    string `json:\"email\"`\n+\tDate     string `json:\"date\"`\n+}\ndiff --git a/common/app/response.go b/common/app/response.go\nindex b2f26d3..0cfa369 100644\n--- a/common/app/response.go\n+++ b/common/app/response.go\n@@ -1,6 +1,7 @@\n package app\n \n import (\n+\t\"errors\"\n \t\"github.com/faiz/llm-code-review/common/errcode\"\n \tlog \"github.com/faiz/llm-code-review/common/logger\"\n \t\"github.com/gin-gonic/gin\"\n@@ -28,8 +29,8 @@ func (r *response) SetPagination(pagination *Pagination) *response {\n }\n \n func (r *response) Success(data any) {\n-\tr.Code = errcode.Success.GetCode()\n-\tr.Msg = errcode.Success.GetMsg()\n+\tr.Code = errcode.Success.Code()\n+\tr.Msg = errcode.Success.Msg()\n \tif _, ok := r.c.Get(\"traceId\"); ok {\n \t\tr.RequestId = r.c.GetString(\"traceId\")\n \t}\n@@ -41,12 +42,16 @@ func (r *response) SuccessOk() {\n \tr.Success(\"\")\n }\n \n-func (r *response) Error(err *errcode.AppError) {\n-\tr.Code = err.GetCode()\n-\tr.Msg = err.GetMsg()\n+func (r *response) Error(err error) {\n+\tappErr := errcode.ErrServer.Clone()\n+\tif !errors.As(err, &appErr) {\n+\t\tappErr = errcode.ErrServer.WithCause(err)\n+\t}\n+\tr.Code = appErr.Code()\n+\tr.Msg = appErr.Msg()\n \tif _, ok := r.c.Get(\"traceId\"); ok {\n \t\tr.RequestId = r.c.GetString(\"traceId\")\n \t}\n \tlog.New(r.c).Error(\"api_response_err\", \"err\", err)\n-\tr.c.JSON(err.HttpStatusCode(), r)\n+\tr.c.JSON(appErr.HttpStatusCode(), r)\n }\ndiff --git a/common/errcode/err.go b/common/errcode/err.go\nindex 64cca15..f0edeea 100644\n--- a/common/errcode/err.go\n+++ b/common/errcode/err.go\n@@ -33,20 +33,10 @@ func (a *AppError) Error() string {\n \tif a == nil {\n \t\treturn \"\"\n \t}\n-\tformatterErr := struct {\n-\t\tCode     int    `json:\"code\"`\n-\t\tMsg      string `json:\"msg\"`\n-\t\tCause    string `json:\"cause\"`\n-\t\tOccurred string `json:\"occurred\"`\n-\t}{\n-\t\tCode:     a.code,\n-\t\tMsg:      a.msg,\n-\t\tOccurred: a.occurred,\n+\tbytes, err := json.Marshal(a.toStructuredError())\n+\tif err != nil {\n+\t\treturn fmt.Sprintf(\"Error() is error: json marshal error: %v\", err)\n \t}\n-\tif a.cause != nil {\n-\t\tformatterErr.Cause = a.cause.Error()\n-\t}\n-\tbytes, _ := json.Marshal(formatterErr)\n \treturn string(bytes)\n }\n \n@@ -54,29 +44,29 @@ func (a *AppError) String() string {\n \treturn a.Error()\n }\n \n-func (a *AppError) GetCode() int {\n+func (a *AppError) Code() int {\n \treturn a.code\n }\n \n-func (a *AppError) GetMsg() string {\n+func (a *AppError) Msg() string {\n \treturn a.msg\n }\n \n func (a *AppError) HttpStatusCode() int {\n \tswitch a.code {\n-\tcase Success.GetCode():\n+\tcase Success.Code():\n \t\treturn http.StatusOK\n-\tcase ErrServer.GetCode():\n+\tcase ErrServer.Code():\n \t\treturn http.StatusInternalServerError\n-\tcase ErrParams.GetCode():\n+\tcase ErrParams.Code():\n \t\treturn http.StatusBadRequest\n-\tcase ErrNotFound.GetCode():\n+\tcase ErrNotFound.Code():\n \t\treturn http.StatusNotFound\n-\tcase ErrTooManyRequests.GetCode():\n+\tcase ErrTooManyRequests.Code():\n \t\treturn http.StatusTooManyRequests\n-\tcase ErrToken.GetCode():\n+\tcase ErrToken.Code():\n \t\treturn http.StatusUnauthorized\n-\tcase ErrForbidden.GetCode():\n+\tcase ErrForbidden.Code():\n \t\treturn http.StatusForbidden\n \tdefault:\n \t\treturn http.StatusInternalServerError\n@@ -107,3 +97,49 @@ func getErrorInfo() string {\n \tfuncName := runtime.FuncForPC(pc).Name()\n \treturn fmt.Sprintf(\"funName: %s file: %s line: %d\", funcName, file, line)\n }\n+\n+func (e *AppError) Clone() *AppError {\n+\tn := new(AppError)\n+\tn.code = e.code\n+\tn.msg = e.msg\n+\tn.cause = e.cause\n+\tn.occurred = e.occurred\n+\treturn n\n+}\n+\n+// AppendMsg 在Code不变的情况下, 在预定义Msg的基础上追加错误信息\n+func (e *AppError) AppendMsg(msg string) *AppError {\n+\tn := e.Clone()\n+\tn.msg = fmt.Sprintf(\"%s, %s\", e.msg, msg)\n+\treturn n\n+}\n+\n+// SetMsg 在Code不变的情况下, 重新设置错误信息, 覆盖预定义的Msg\n+func (e *AppError) SetMsg(msg string) *AppError {\n+\tn := e.Clone()\n+\tn.msg = msg\n+\treturn n\n+}\n+\n+type formattedErr struct {\n+\tCode     int         `json:\"code\"`\n+\tMsg      string      `json:\"msg\"`\n+\tCause    interface{} `json:\"cause\"`\n+\tOccurred string      `json:\"occurred\"`\n+}\n+\n+// toStructuredError 在JSON Encode 前把Error进行格式化\n+func (e *AppError) toStructuredError() *formattedErr {\n+\tfe := new(formattedErr)\n+\tfe.Code = e.Code()\n+\tfe.Msg = e.Msg()\n+\tfe.Occurred = e.occurred\n+\tif e.cause != nil {\n+\t\tif appErr, ok := e.cause.(*AppError); ok {\n+\t\t\tfe.Cause = appErr.toStructuredError()\n+\t\t} else {\n+\t\t\tfe.Cause = e.cause.Error()\n+\t\t}\n+\t}\n+\treturn fe\n+}\ndiff --git a/go.mod b/go.mod\nindex f4d8aed..ade386e 100644\n--- a/go.mod\n+++ b/go.mod\n@@ -16,11 +16,16 @@ require (\n )\n \n require (\n+\tgithub.com/IBM/sarama v1.45.1 // indirect\n \tgithub.com/bytedance/sonic v1.12.8 // indirect\n \tgithub.com/bytedance/sonic/loader v0.2.3 // indirect\n \tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n \tgithub.com/cloudwego/base64x v0.1.5 // indirect\n+\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n \tgithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect\n+\tgithub.com/eapache/go-resiliency v1.7.0 // indirect\n+\tgithub.com/eapache/go-xerial-snappy v0.0.0-20230731223053-c322873962e3 // indirect\n+\tgithub.com/eapache/queue v1.1.0 // indirect\n \tgithub.com/fsnotify/fsnotify v1.8.0 // indirect\n \tgithub.com/gabriel-vasile/mimetype v1.4.8 // indirect\n \tgithub.com/gin-contrib/sse v1.0.0 // indirect\n@@ -30,15 +35,27 @@ require (\n \tgithub.com/go-sql-driver/mysql v1.7.0 // indirect\n \tgithub.com/go-viper/mapstructure/v2 v2.2.1 // indirect\n \tgithub.com/goccy/go-json v0.10.5 // indirect\n+\tgithub.com/golang/snappy v0.0.4 // indirect\n+\tgithub.com/hashicorp/errwrap v1.0.0 // indirect\n+\tgithub.com/hashicorp/go-multierror v1.1.1 // indirect\n+\tgithub.com/hashicorp/go-uuid v1.0.3 // indirect\n+\tgithub.com/jcmturner/aescts/v2 v2.0.0 // indirect\n+\tgithub.com/jcmturner/dnsutils/v2 v2.0.0 // indirect\n+\tgithub.com/jcmturner/gofork v1.7.6 // indirect\n+\tgithub.com/jcmturner/gokrb5/v8 v8.4.4 // indirect\n+\tgithub.com/jcmturner/rpc/v2 v2.0.3 // indirect\n \tgithub.com/jinzhu/inflection v1.0.0 // indirect\n \tgithub.com/jinzhu/now v1.1.5 // indirect\n \tgithub.com/json-iterator/go v1.1.12 // indirect\n+\tgithub.com/klauspost/compress v1.17.11 // indirect\n \tgithub.com/klauspost/cpuid/v2 v2.2.9 // indirect\n \tgithub.com/leodido/go-urn v1.4.0 // indirect\n \tgithub.com/mattn/go-isatty v0.0.20 // indirect\n \tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n \tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n \tgithub.com/pelletier/go-toml/v2 v2.2.3 // indirect\n+\tgithub.com/pierrec/lz4/v4 v4.1.22 // indirect\n+\tgithub.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect\n \tgithub.com/sagikazarmark/locafero v0.7.0 // indirect\n \tgithub.com/sourcegraph/conc v0.3.0 // indirect\n \tgithub.com/spf13/afero v1.12.0 // indirect\ndiff --git a/go.sum b/go.sum\nindex 8e11220..5e28799 100644\n--- a/go.sum\n+++ b/go.sum\n@@ -1,3 +1,5 @@\n+github.com/IBM/sarama v1.45.1 h1:nY30XqYpqyXOXSNoe2XCgjj9jklGM1Ye94ierUb1jQ0=\n+github.com/IBM/sarama v1.45.1/go.mod h1:qifDhA3VWSrQ1TjSMyxDl3nYL3oX2C83u+G6L79sq4w=\n github.com/bsm/ginkgo/v2 v2.12.0 h1:Ny8MWAHyOepLGlLKYmXG4IEkioBysk6GpaRTLC8zwWs=\n github.com/bsm/ginkgo/v2 v2.12.0/go.mod h1:SwYbGRRDovPVboqFv0tPTcG1sN61LM1Z4ARdbAV9g4c=\n github.com/bsm/gomega v1.27.10 h1:yeMWxP2pV2fG3FgAODIY8EiRE3dy0aeFYt4l7wh6yKA=\n@@ -17,6 +19,12 @@ github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c\n github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f h1:lO4WD4F/rVNCu3HqELle0jiPLLBs70cWOduZpkS1E78=\n github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f/go.mod h1:cuUVRXasLTGF7a8hSLbxyZXjz+1KgoB3wDUb6vlszIc=\n+github.com/eapache/go-resiliency v1.7.0 h1:n3NRTnBn5N0Cbi/IeOHuQn9s2UwVUH7Ga0ZWcP+9JTA=\n+github.com/eapache/go-resiliency v1.7.0/go.mod h1:5yPzW0MIvSe0JDsv0v+DvcjEv2FyD6iZYSs1ZI+iQho=\n+github.com/eapache/go-xerial-snappy v0.0.0-20230731223053-c322873962e3 h1:Oy0F4ALJ04o5Qqpdz8XLIpNA3WM/iSIXqxtqo7UGVws=\n+github.com/eapache/go-xerial-snappy v0.0.0-20230731223053-c322873962e3/go.mod h1:YvSRo5mw33fLEx1+DlK6L2VV43tJt5Eyel9n9XBcR+0=\n+github.com/eapache/queue v1.1.0 h1:YOEu7KNc61ntiQlcEeUIoDTJ2o8mQznoNvUhiigpIqc=\n+github.com/eapache/queue v1.1.0/go.mod h1:6eCeP0CKFpHLu8blIFXhExK/dRa7WDZfr6jVFPTqq+I=\n github.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=\n github.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\n github.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=\n@@ -41,6 +49,8 @@ github.com/go-viper/mapstructure/v2 v2.2.1 h1:ZAaOCxANMuZx5RCeg0mBdEZk7DZasvvZIx\n github.com/go-viper/mapstructure/v2 v2.2.1/go.mod h1:oJDH3BJKyqBA2TXFhDsKDGDTlndYOZ6rGS0BRZIxGhM=\n github.com/goccy/go-json v0.10.5 h1:Fq85nIqj+gXn/S5ahsiTlK3TmC85qgirsdTP/+DeaC4=\n github.com/goccy/go-json v0.10.5/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=\n+github.com/golang/snappy v0.0.4 h1:yAGX7huGHXlcLOEtBnF4w7FQwA26wojNCwOYAEhLjQM=\n+github.com/golang/snappy v0.0.4/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\n github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\n github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\n github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\n@@ -48,6 +58,26 @@ github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/\n github.com/google/subcommands v1.2.0/go.mod h1:ZjhPrFU+Olkh9WazFPsl27BQ4UPiG37m3yTrtFlrHVk=\n github.com/google/wire v0.6.0 h1:HBkoIh4BdSxoyo9PveV8giw7ZsaBOvzWKfcg/6MrVwI=\n github.com/google/wire v0.6.0/go.mod h1:F4QhpQ9EDIdJ1Mbop/NZBRB+5yrR6qg3BnctaoUk6NA=\n+github.com/gorilla/securecookie v1.1.1/go.mod h1:ra0sb63/xPlUeL+yeDciTfxMRAA+MP+HVt/4epWDjd4=\n+github.com/gorilla/sessions v1.2.1/go.mod h1:dk2InVEVJ0sfLlnXv9EAgkf6ecYs/i80K/zI+bUmuGM=\n+github.com/hashicorp/errwrap v1.0.0 h1:hLrqtEDnRye3+sgx6z4qVLNuviH3MR5aQ0ykNJa/UYA=\n+github.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\n+github.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=\n+github.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\n+github.com/hashicorp/go-uuid v1.0.2/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\n+github.com/hashicorp/go-uuid v1.0.3 h1:2gKiV6YVmrJ1i2CKKa9obLvRieoRGviZFL26PcT/Co8=\n+github.com/hashicorp/go-uuid v1.0.3/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\n+github.com/jcmturner/aescts/v2 v2.0.0 h1:9YKLH6ey7H4eDBXW8khjYslgyqG2xZikXP0EQFKrle8=\n+github.com/jcmturner/aescts/v2 v2.0.0/go.mod h1:AiaICIRyfYg35RUkr8yESTqvSy7csK90qZ5xfvvsoNs=\n+github.com/jcmturner/dnsutils/v2 v2.0.0 h1:lltnkeZGL0wILNvrNiVCR6Ro5PGU/SeBvVO/8c/iPbo=\n+github.com/jcmturner/dnsutils/v2 v2.0.0/go.mod h1:b0TnjGOvI/n42bZa+hmXL+kFJZsFT7G4t3HTlQ184QM=\n+github.com/jcmturner/gofork v1.7.6 h1:QH0l3hzAU1tfT3rZCnW5zXl+orbkNMMRGJfdJjHVETg=\n+github.com/jcmturner/gofork v1.7.6/go.mod h1:1622LH6i/EZqLloHfE7IeZ0uEJwMSUyQ/nDd82IeqRo=\n+github.com/jcmturner/goidentity/v6 v6.0.1/go.mod h1:X1YW3bgtvwAXju7V3LCIMpY0Gbxyjn/mY9zx4tFonSg=\n+github.com/jcmturner/gokrb5/v8 v8.4.4 h1:x1Sv4HaTpepFkXbt2IkL29DXRf8sOfZXo8eRKh687T8=\n+github.com/jcmturner/gokrb5/v8 v8.4.4/go.mod h1:1btQEpgT6k+unzCwX1KdWMEwPPkkgBtP+F6aCACiMrs=\n+github.com/jcmturner/rpc/v2 v2.0.3 h1:7FXXj8Ti1IaVFpSAziCZWNzbNuZmnvw/i6CqLNdWfZY=\n+github.com/jcmturner/rpc/v2 v2.0.3/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=\n github.com/jinzhu/copier v0.4.0 h1:w3ciUoD19shMCRargcpm0cm91ytaBhDvuRpz1ODO/U8=\n github.com/jinzhu/copier v0.4.0/go.mod h1:DfbEm0FYsaqBcKcFuvmOZb218JkPGtvSHsKg8S8hyyg=\n github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=\n@@ -58,6 +88,8 @@ github.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=\n github.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=\n github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\n github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\n+github.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\n+github.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\n github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\n github.com/klauspost/cpuid/v2 v2.2.9 h1:66ze0taIn2H33fBvCkXuv9BmCwDfafmiIVpKV9kKGuY=\n github.com/klauspost/cpuid/v2 v2.2.9/go.mod h1:rqkxqrZ1EhYM9G+hXH7YdowN5R5RGN6NK4QwQ3WMXF8=\n@@ -79,8 +111,12 @@ github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9G\n github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\n github.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=\n github.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=\n+github.com/pierrec/lz4/v4 v4.1.22 h1:cKFw6uJDK+/gfw5BcDL0JL5aBsAFdsIT18eRtLj7VIU=\n+github.com/pierrec/lz4/v4 v4.1.22/go.mod h1:gZWDp/Ze/IJXGXf23ltt2EXimqmTUXEy0GFuRQyBid4=\n github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\n github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\n+github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 h1:N/ElC8H3+5XpJzTSTfLsJV/mx9Q9g7kxmchpfZyxgzM=\n+github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=\n github.com/redis/go-redis/v9 v9.8.0 h1:q3nRvjrlge/6UD7eTu/DSg2uYiU2mCL0G/uzBWqhicI=\n github.com/redis/go-redis/v9 v9.8.0/go.mod h1:huWgSWd8mW6+m0VPhJjSSQ+d6Nh1VICQ6Q5lHuCH/Iw=\n github.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\n@@ -102,6 +138,7 @@ github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSS\n github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\n github.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\n github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\n+github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\n github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\n@@ -126,6 +163,7 @@ golang.org/x/arch v0.14.0 h1:z9JUEZWr8x4rR0OU6c4/4t6E6jOZ8/QBS2bBYBm4tx4=\n golang.org/x/arch v0.14.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=\n golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\n golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\n+golang.org/x/crypto v0.6.0/go.mod h1:OFC/31mSvZgRz0V1QTNCzfAI1aIRzbiufJtkMIlEp58=\n golang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=\n golang.org/x/crypto v0.18.0/go.mod h1:R0j02AL6hcrfOiy9T4ZYp/rcWeMxM3L6QYxlOuEG1mg=\n golang.org/x/crypto v0.33.0 h1:IOBPskki6Lysi0lo9qQvbxiQ+FvsCC/YWOecCHAixus=\n@@ -135,9 +173,11 @@ golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\n golang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\n golang.org/x/mod v0.14.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\n golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n+golang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\n golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\n golang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\n+golang.org/x/net v0.7.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\n golang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\n golang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\n golang.org/x/net v0.20.0/go.mod h1:z8BVo6PvndSri0LbOE3hAn0apkU+1YvI6E70E9jsnvY=\n@@ -189,6 +229,7 @@ gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogR\n gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n gopkg.in/natefinch/lumberjack.v2 v2.2.1 h1:bBRl1b0OH9s/DuPhuXpNl+VtCaJXFZ5/uEFST95x9zc=\n gopkg.in/natefinch/lumberjack.v2 v2.2.1/go.mod h1:YD8tP3GAjkrDg1eZH7EGmyESg/lsYskCTPBJVb9jqSc=\n+gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\n gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ndiff --git a/logic/service/demo.go b/logic/service/demo.go\ndeleted file mode 100644\nindex db68669..0000000\n--- a/logic/service/demo.go\n+++ /dev/null\n@@ -1,50 +0,0 @@\n-package appService\n-\n-import (\n-\t\"context\"\n-\t\"github.com/faiz/llm-code-review/api/reply\"\n-\t\"github.com/faiz/llm-code-review/api/request\"\n-\t\"github.com/faiz/llm-code-review/common/errcode\"\n-\t\"github.com/faiz/llm-code-review/common/util\"\n-\t\"github.com/faiz/llm-code-review/logic/domain\"\n-\t\"github.com/faiz/llm-code-review/logic/repository\"\n-)\n-\n-type DemoAppServiceV1 struct {\n-\tds domainService.DemoDomainService\n-}\n-\n-func NewDemoAppServiceV1(domainSvc domainService.DemoDomainService) *DemoAppServiceV1 {\n-\treturn &DemoAppServiceV1{\n-\t\tds: domainSvc,\n-\t}\n-}\n-\n-func (as *DemoAppServiceV1) GetAllIdentities(c context.Context) ([]int64, error) {\n-\tdomains, err := as.ds.GetDemos(c)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\tres := make([]int64, 0, len(domains))\n-\tfor i := range domains {\n-\t\tres = append(res, domains[i].Id)\n-\t}\n-\treturn res, nil\n-}\n-\n-func (as *DemoAppServiceV1) CreateDemoOrder(c context.Context, order *request.DemoOrderReq) (*reply.DemoOrder, error) {\n-\tdomainOrder := new(domain.DemoOrder)\n-\terr := util.Convert(domainOrder, order)\n-\tif err != nil {\n-\t\treturn nil, errcode.Wrap(\"fail to convert req.OrderReq to domain.Order\", err)\n-\t}\n-\tdomainOrder, err = as.ds.CreateDemoOrder(c, domainOrder)\n-\tif err != nil {\n-\t\treturn nil, errcode.Wrap(\"fail to create order\", err)\n-\t}\n-\trep := new(reply.DemoOrder)\n-\tif err = util.Convert(rep, domainOrder); err != nil {\n-\t\treturn nil, errcode.Wrap(\"fail to convert domain.Order to reply.Order\", err)\n-\t}\n-\treturn rep, nil\n-}\ndiff --git a/logic/service/client.go b/logic/service/client.go\nindex f7ac7c3..b186e2d 100644\n--- a/logic/service/client.go\n+++ b/logic/service/client.go\n@@ -2,11 +2,9 @@ package appService\n \n import (\n \t\"context\"\n-\t\"github.com/faiz/llm-code-review/api/reply\"\n \t\"github.com/faiz/llm-code-review/api/request\"\n )\n \n-type DemoAppService interface {\n-\tGetAllIdentities(c context.Context) ([]int64, error)\n-\tCreateDemoOrder(c context.Context, order *request.DemoOrderReq) (*reply.DemoOrder, error)\n+type WebHookService interface {\n+\tProcessHook(ctx context.Context, hook *request.HookRequest) error\n }\ndiff --git a/logic/service/webhook.go b/logic/service/webhook.go\nnew file mode 100644\nindex 0000000..e49288e\n--- /dev/null\n+++ b/logic/service/webhook.go\n@@ -0,0 +1,17 @@\n+package appService\n+\n+import (\n+\t\"context\"\n+\t\"github.com/faiz/llm-code-review/api/request\"\n+)\n+\n+type WebHookServiceV1 struct{}\n+\n+func (svc *WebHookServiceV1) ProcessHook(ctx context.Context, hook *request.HookRequest) error {\n+\t// TODO\n+\tpanic(\"\")\n+}\n+\n+func NewWebHookServiceV1() WebHookService {\n+\treturn &WebHookServiceV1{}\n+}\ndiff --git a/test/kafka_test.go b/test/kafka_test.go\nnew file mode 100644\nindex 0000000..7d11415\n--- /dev/null\n+++ b/test/kafka_test.go\n@@ -0,0 +1,31 @@\n+package test\n+\n+import (\n+\t\"github.com/IBM/sarama\"\n+\t\"log\"\n+\t\"strconv\"\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+func TestProduce(t *testing.T) {\n+\tconfig := sarama.NewConfig()\n+\tconfig.Producer.Return.Successes = true\n+\tconfig.Producer.Return.Errors = true\n+\tproducer, err := sarama.NewSyncProducer([]string{\":9092\"}, config)\n+\tif err != nil {\n+\t\tlog.Fatal(\"NewSyncProducer err:\", err)\n+\t}\n+\tdefer producer.Close()\n+\tfor i := 0; i < 10; i++ {\n+\t\tstr := strconv.Itoa(int(time.Now().UnixNano()))\n+\n+\t\tmsg := &sarama.ProducerMessage{Topic: \"topic-test\", Key: nil, Value: sarama.StringEncoder(str)}\n+\t\tpartition, offset, err := producer.SendMessage(msg)\n+\t\tif err != nil {\n+\t\t\tlog.Println(\"SendMessage err: \", err)\n+\t\t\treturn\n+\t\t}\n+\t\tlog.Printf(\"[Producer] partitionid: %d; offset:%d, value: %s\\n\", partition, offset, str)\n+\t}\n+}\ndiff --git a/wire.go b/wire.go\nindex c0758e0..87004a0 100644\n--- a/wire.go\n+++ b/wire.go\n@@ -6,10 +6,6 @@ import (\n \t\"github.com/faiz/llm-code-review/api/controller\"\n \t\"github.com/faiz/llm-code-review/api/router\"\n \t\"github.com/faiz/llm-code-review/common/middleware\"\n-\t\"github.com/faiz/llm-code-review/dal/cache\"\n-\t\"github.com/faiz/llm-code-review/dal/dao\"\n-\t\"github.com/faiz/llm-code-review/logic/appService\"\n-\t\"github.com/faiz/llm-code-review/logic/domainService\"\n \t\"github.com/gin-gonic/gin\"\n \t\"github.com/google/wire\"\n )\n@@ -17,10 +13,6 @@ import (\n func InitializeApp() *gin.Engine {\n \twire.Build(router.RegisterRoutersAndMiddleware,\n \t\tmiddleware.GetHandlerFunc, controller.NewBuildController,\n-\t\twire.Bind(new(appService.DemoAppService), new(*appService.DemoAppServiceV1)), appService.NewDemoAppServiceV1,\n-\t\twire.Bind(new(domainService.DemoDomainService), new(*domainService.DemoDomainServiceV1)), domainService.NewDemoDomainServiceV1,\n-\t\twire.Bind(new(dao.DemoDAO), new(*dao.DemoDAOV1)), wire.Bind(new(cache.DemoCache), new(*cache.DemoCacheV1)),\n-\t\tdao.NewDemoDAO, cache.NewCacheV1,\n \t)\n \treturn nil\n }"
	//data := `{
	//    "model": "deepseek-chat",
	//    "messages": [
	//      {"role": "system", "content": "You are a helpful assistant."},
	//      {"role": "user", "content": "%s"}
	//    ],
	//    "stream": false
	//  }`
	//data = fmt.Sprintf(data, str)

	// 构造请求体结构体
	requestBody := struct {
		Model    string `json:"model"`
		Messages []struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		} `json:"messages"`
		Stream bool `json:"stream"`
	}{
		Model: "deepseek-chat",
		Messages: []struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		}{
			{
				Role:    "system",
				Content: "You are a helpful assistant.",
			},
			{
				Role:    "user",
				Content: str,
			},
		},
		Stream: false,
	}
	jsonData, _ := json.Marshal(requestBody)
	_, body, err := httptool.Post(context.TODO(), jsonData,
		"https://api.deepseek.com/chat/completions",
		httptool.WithAuthorization(os.Getenv("DEEPKEY")),
		httptool.WithTimeout(time.Minute*30))
	if err != nil {
		panic(err)
	}
	fmt.Printf("%s", body)
}

// 写一个 function call，让 llm 自己去获取代码变更的代码，并给出相应的代码修改建议。
//

// A B C
// A：接收 webhook 信息
// B：调用 llm，生成邮件任务
// C：发送邮件

func TestExtract(t *testing.T) {
	str := "{\n  \"id\" : \"af5c0d2c-361f-4fb6-985c-91b45a221abb\",\n  \"object\" : \"chat.completion\",\n  \"created\" : 1749276162,\n  \"model\" : \"deepseek-chat\",\n  \"choices\" : [ {\n    \"index\" : 0,\n    \"message\" : {\n      \"role\" : \"assistant\",\n      \"content\" : \"# HTML 自我介绍\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\\"zh-CN\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>关于我</title>\\n    <style>\\n        body {\\n            font-family: 'Arial', sans-serif;\\n            line-height: 1.6;\\n            max-width: 800px;\\n            margin: 0 auto;\\n            padding: 20px;\\n            color: #333;\\n            background-color: #f9f9f9;\\n        }\\n        h1 {\\n            color: #2c3e50;\\n            border-bottom: 2px solid #3498db;\\n            padding-bottom: 10px;\\n        }\\n        .container {\\n            background-color: white;\\n            padding: 30px;\\n            border-radius: 8px;\\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\\n        }\\n        .highlight {\\n            color: #e74c3c;\\n            font-weight: bold;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <div class=\\\"container\\\">\\n        <h1>关于我</h1>\\n        <p>你好！我是一个<span class=\\\"highlight\\\">AI助手</span>，由先进的自然语言处理技术驱动。</p>\\n        \\n        <h2>我的能力</h2>\\n        <ul>\\n            <li>回答各种知识性问题</li>\\n            <li>协助解决技术问题</li>\\n            <li>提供写作和创意建议</li>\\n            <li>帮助学习和研究</li>\\n            <li>进行多语言翻译</li>\\n        </ul>\\n        \\n        <h2>使用提示</h2>\\n        <p>你可以像和朋友聊天一样向我提问，我会尽力提供准确、有用的回答。如果有任何不清楚的地方，请随时让我澄清！</p>\\n        \\n        <p><em>注意：我的知识截止到2023年10月，无法浏览实时网络信息。</em></p>\\n    </div>\\n</body>\\n</html>\\n```\\n\\n这是一个完整的HTML文档，包含了：\\n1. 标准的HTML5文档声明\\n2. 基本的头部信息(meta tags)\\n3. 简单的CSS样式\\n4. 结构化的自我介绍内容\\n5. 响应式设计元素\\n\\n你可以将此代码复制到.html文件中用浏览器打开查看效果。\"\n    },\n    \"logprobs\" : null,\n    \"finish_reason\" : \"stop\"\n  } ],\n  \"usage\" : {\n    \"prompt_tokens\" : 20,\n    \"completion_tokens\" : 515,\n    \"total_tokens\" : 535,\n    \"prompt_tokens_details\" : {\n      \"cached_tokens\" : 0\n    },\n    \"prompt_cache_hit_tokens\" : 0,\n    \"prompt_cache_miss_tokens\" : 20\n  },\n  \"system_fingerprint\" : \"fp_8802369eaa_prod0425fp8\"\n}"
	fmt.Printf("%s", str)
}
