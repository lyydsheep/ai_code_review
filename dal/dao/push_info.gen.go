// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/faiz/llm-code-review/dal/model"
)

func newPushInfo(db *gorm.DB, opts ...gen.DOOption) pushInfo {
	_pushInfo := pushInfo{}

	_pushInfo.pushInfoDo.UseDB(db, opts...)
	_pushInfo.pushInfoDo.UseModel(&model.PushInfo{})

	tableName := _pushInfo.pushInfoDo.TableName()
	_pushInfo.ALL = field.NewAsterisk(tableName)
	_pushInfo.ID = field.NewInt64(tableName, "id")
	_pushInfo.EventID = field.NewString(tableName, "event_id")
	_pushInfo.Username = field.NewString(tableName, "username")
	_pushInfo.Repository = field.NewString(tableName, "repository")
	_pushInfo.Diff = field.NewString(tableName, "diff")
	_pushInfo.EventTime = field.NewTime(tableName, "event_time")
	_pushInfo.Status = field.NewString(tableName, "status")
	_pushInfo.GmtCreate = field.NewTime(tableName, "gmt_create")
	_pushInfo.GmtUpdate = field.NewTime(tableName, "gmt_update")

	_pushInfo.fillFieldMap()

	return _pushInfo
}

type pushInfo struct {
	pushInfoDo pushInfoDo

	ALL        field.Asterisk
	ID         field.Int64
	EventID    field.String // 事件唯一 ID
	Username   field.String // 用户名
	Repository field.String
	Diff       field.String
	EventTime  field.Time
	Status     field.String // 事件状态(init,success,fail)
	GmtCreate  field.Time
	GmtUpdate  field.Time

	fieldMap map[string]field.Expr
}

func (p pushInfo) Table(newTableName string) *pushInfo {
	p.pushInfoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pushInfo) As(alias string) *pushInfo {
	p.pushInfoDo.DO = *(p.pushInfoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pushInfo) updateTableName(table string) *pushInfo {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.EventID = field.NewString(table, "event_id")
	p.Username = field.NewString(table, "username")
	p.Repository = field.NewString(table, "repository")
	p.Diff = field.NewString(table, "diff")
	p.EventTime = field.NewTime(table, "event_time")
	p.Status = field.NewString(table, "status")
	p.GmtCreate = field.NewTime(table, "gmt_create")
	p.GmtUpdate = field.NewTime(table, "gmt_update")

	p.fillFieldMap()

	return p
}

func (p *pushInfo) WithContext(ctx context.Context) *pushInfoDo { return p.pushInfoDo.WithContext(ctx) }

func (p pushInfo) TableName() string { return p.pushInfoDo.TableName() }

func (p pushInfo) Alias() string { return p.pushInfoDo.Alias() }

func (p pushInfo) Columns(cols ...field.Expr) gen.Columns { return p.pushInfoDo.Columns(cols...) }

func (p *pushInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pushInfo) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["event_id"] = p.EventID
	p.fieldMap["username"] = p.Username
	p.fieldMap["repository"] = p.Repository
	p.fieldMap["diff"] = p.Diff
	p.fieldMap["event_time"] = p.EventTime
	p.fieldMap["status"] = p.Status
	p.fieldMap["gmt_create"] = p.GmtCreate
	p.fieldMap["gmt_update"] = p.GmtUpdate
}

func (p pushInfo) clone(db *gorm.DB) pushInfo {
	p.pushInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pushInfo) replaceDB(db *gorm.DB) pushInfo {
	p.pushInfoDo.ReplaceDB(db)
	return p
}

type pushInfoDo struct{ gen.DO }

func (p pushInfoDo) Debug() *pushInfoDo {
	return p.withDO(p.DO.Debug())
}

func (p pushInfoDo) WithContext(ctx context.Context) *pushInfoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pushInfoDo) ReadDB() *pushInfoDo {
	return p.Clauses(dbresolver.Read)
}

func (p pushInfoDo) WriteDB() *pushInfoDo {
	return p.Clauses(dbresolver.Write)
}

func (p pushInfoDo) Session(config *gorm.Session) *pushInfoDo {
	return p.withDO(p.DO.Session(config))
}

func (p pushInfoDo) Clauses(conds ...clause.Expression) *pushInfoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pushInfoDo) Returning(value interface{}, columns ...string) *pushInfoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pushInfoDo) Not(conds ...gen.Condition) *pushInfoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pushInfoDo) Or(conds ...gen.Condition) *pushInfoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pushInfoDo) Select(conds ...field.Expr) *pushInfoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pushInfoDo) Where(conds ...gen.Condition) *pushInfoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pushInfoDo) Order(conds ...field.Expr) *pushInfoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pushInfoDo) Distinct(cols ...field.Expr) *pushInfoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pushInfoDo) Omit(cols ...field.Expr) *pushInfoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pushInfoDo) Join(table schema.Tabler, on ...field.Expr) *pushInfoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pushInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pushInfoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pushInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *pushInfoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pushInfoDo) Group(cols ...field.Expr) *pushInfoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pushInfoDo) Having(conds ...gen.Condition) *pushInfoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pushInfoDo) Limit(limit int) *pushInfoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pushInfoDo) Offset(offset int) *pushInfoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pushInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pushInfoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pushInfoDo) Unscoped() *pushInfoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pushInfoDo) Create(values ...*model.PushInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pushInfoDo) CreateInBatches(values []*model.PushInfo, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pushInfoDo) Save(values ...*model.PushInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pushInfoDo) First() (*model.PushInfo, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushInfo), nil
	}
}

func (p pushInfoDo) Take() (*model.PushInfo, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushInfo), nil
	}
}

func (p pushInfoDo) Last() (*model.PushInfo, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushInfo), nil
	}
}

func (p pushInfoDo) Find() ([]*model.PushInfo, error) {
	result, err := p.DO.Find()
	return result.([]*model.PushInfo), err
}

func (p pushInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PushInfo, err error) {
	buf := make([]*model.PushInfo, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pushInfoDo) FindInBatches(result *[]*model.PushInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pushInfoDo) Attrs(attrs ...field.AssignExpr) *pushInfoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pushInfoDo) Assign(attrs ...field.AssignExpr) *pushInfoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pushInfoDo) Joins(fields ...field.RelationField) *pushInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pushInfoDo) Preload(fields ...field.RelationField) *pushInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pushInfoDo) FirstOrInit() (*model.PushInfo, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushInfo), nil
	}
}

func (p pushInfoDo) FirstOrCreate() (*model.PushInfo, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PushInfo), nil
	}
}

func (p pushInfoDo) FindByPage(offset int, limit int) (result []*model.PushInfo, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pushInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pushInfoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pushInfoDo) Delete(models ...*model.PushInfo) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pushInfoDo) withDO(do gen.Dao) *pushInfoDo {
	p.DO = *do.(*gen.DO)
	return p
}
